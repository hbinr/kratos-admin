syntax = "proto3";

package api.user.service.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "kratos-admin/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

service User {
    rpc Register (RegisterReq) returns (RegisterReply){
        option (google.api.http) = {
            post:"/v1/register"
            body:"*"
        };
    };

    rpc Login (LoginReq) returns (LoginReply) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    };

    rpc UpdateUser (UpdateUserReq) returns (UpdateUserReply){
        option (google.api.http) = {
            put: "/v1/user"
            body: "*"
        };
    };

    rpc GetUser (GetUserReq) returns (GetUserReply){
        option (google.api.http) = {
            get: "/v1/user/{user_id}"
        };
    };

    rpc ListUser (ListUserReq) returns (ListUserReply){
        option (google.api.http) = {
            // kratos http 模块 底层是使用的mutex, 所以会有路由前缀重复，无法识别的问题
            // get:"v1/user/list"

            // 改成 users 就可以了
            get: "/v1/users"
        };
    };

    rpc DeleteUser (DeleteUserReq) returns (DeleteUserReply){
        option (google.api.http) = {
            delete: "/v1/user/{user_id}"
        };
    };


}

message RegisterReq {
    uint32 age = 1;
    string user_name = 2 [(validate.rules).string = {min_len: 6, max_len: 18}];
    string password = 3 [(validate.rules).string = {min_len: 6, max_len: 18}];
    string email = 4 [(validate.rules).string.email = true];
    string role_name = 5;
    string phone = 6;
}

message RegisterReply {
    uint32 user_id = 1;
}

message LoginReq {
    string user_name = 1 [(validate.rules).string = {min_len: 6, max_len: 18}];
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 18}];
}

message LoginReply {
    string token = 1;
}


message UpdateUserReq {
    int64 id = 1;
    uint32 user_id = 2;
    uint32 age = 3;
    string user_name = 4 [(validate.rules).string = {min_len: 6, max_len: 18}, (validate.rules).message.required = false];
    string password = 5 [(validate.rules).string = {min_len: 6, max_len: 18}, (validate.rules).message.required = false];
    string email = 6 [(validate.rules).string.email = true, (validate.rules).message.required = false];
    string role_name = 7;
    string phone = 8;
}

message UpdateUserReply {
    int64 id = 1;
    uint32 user_id = 2;
    uint32 age = 3;
    string user_name = 4;
    string password = 5;
    string email = 6;
    string role_name = 7;
    string phone = 8;
    string created_at = 9;
    string updated_at = 10;
}


message DeleteUserReq {
    uint32 user_id = 1;
}

message DeleteUserReply {
    bool ok = 1;
}

message GetUserReq {
    uint32 user_id = 1;
}

message GetUserReply {
    int64 id = 1;
    uint32 user_id = 2;
    uint32 age = 3;
    string user_name = 4;
    string password = 5;
    string email = 6;
    string role_name = 7;
    string phone = 8;
    string created_at = 9;
    string updated_at = 10;
}

message ListUserReq {
    uint32 user_id = 1;
    uint32 page_num = 2;
    uint32 page_size = 3;
}

message ListUserReply {
    message User {
        int64 id = 1;
        uint32 user_id = 2;
        uint32 age = 3;
        string user_name = 4;
        string password = 5;
        string email = 6;
        string role_name = 7;
        string phone = 8;
        string created_at = 9;
        string updated_at = 10;
    }
    repeated User users = 1;
}

message VerifyPasswordReq {
    string user_name = 1 [(validate.rules).string = {min_len: 6, max_len: 18}];
    string password = 2 [(validate.rules).string = {min_len: 6, max_len: 18}];
}

message VerifyPasswordReply {
    bool ok = 1;
    int64 id = 2;
}